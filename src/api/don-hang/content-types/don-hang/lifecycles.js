const TelegramBot = require("node-telegram-bot-api");
module.exports = {
  async afterCreate(event) {
    const { result, params } = event;
    console.log(params);

    // const userDetail = await strapi.entityService.findOne(
    //   "plugin::users-permissions.user", // S·ª≠ d·ª•ng ƒë√∫ng namespace v√† model
    //   params.data?.user?.connect[0]?.id, // ID ng∆∞·ªùi d√πng
    //   { populate: ["carts"] } // Ch·ªâ c·∫ßn populate m·∫£ng carts
    // );

    // const token = process.env.TOKEN_BOT_ORDER;
    // const chatId = process.env.CHATID_GROUP_ORDER;
    // const bot = new TelegramBot(token, { polling: true });

    // const message = `
    //   üéâ ƒê∆°n h√†ng m·ªõi ƒë∆∞·ª£c t·∫°o!
    //   üë§ Kh√°ch h√†ng: ${userDetail.firstName} ${userDetail.lastName}
    //   üìù Ghi ch√∫: ${params.data.note || "Kh√¥ng c√≥ ghi ch√∫"}
    //   üí∞ T·ªïng gi√° tr·ªã ƒë∆°n h√†ng: ${params.data.finalAmount.toLocaleString(
    //     "vi-VN"
    //   )}‚Ç´
    //   üî¢ M√£ ƒë∆°n h√†ng: ${params.data.ID_order}

    // `;

    // try {
    //   await bot.sendMessage(chatId, message);
    //   console.log("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn Telegram");
    // } catch (error) {
    //   console.error("L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram:", error);
    // }

    try {
      // L·∫•y userId t·ª´ params
      const userId = params.data.user;

      if (!userId) {
        console.log("Kh√¥ng t√¨m th·∫•y userId trong params");
        return;
      }

      // S·ª≠ d·ª•ng entityService ƒë·ªÉ truy v·∫•n ng∆∞·ªùi d√πng t·ª´ plugin users-permissions
      const user = await strapi.entityService.findOne(
        "plugin::users-permissions.user", // S·ª≠ d·ª•ng ƒë√∫ng namespace v√† model
        userId, // ID ng∆∞·ªùi d√πng
        { populate: ["carts"] } // Ch·ªâ c·∫ßn populate m·∫£ng carts
      );

      // Ki·ªÉm tra n·∫øu user t·ªìn t·∫°i v√† c√≥ gi·ªè h√†ng
      if (user && user.carts && user.carts.length > 0) {
        // L√†m r·ªóng gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
        user.carts = []; // G√°n l·∫°i gi·ªè h√†ng th√†nh m·∫£ng r·ªóng

        // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
        await strapi.entityService.update(
          "plugin::users-permissions.user",
          userId,
          { data: { carts: [] } }
        );

        console.log(
          `Gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng v·ªõi ID ${userId} ƒë√£ ƒë∆∞·ª£c l√†m r·ªóng.`
        );
      } else {
        console.log(`Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng v·ªõi ID ${userId}`);
      }

      // Ki·ªÉm tra voucher v√† gi·∫£m so_luong n·∫øu c√≥ voucher
      const voucherId = params.data.voucher; // L·∫•y voucher ID t·ª´ params
      if (voucherId) {
        // Truy v·∫•n voucher t·ª´ b·∫£ng voucher
        const voucher = await strapi.entityService.findOne(
          "api::voucher.voucher", // ƒê·∫£m b·∫£o t√™n model ƒë√∫ng
          voucherId
        );

        if (voucher) {
          console.log("Voucher found:", voucher);

          // Ki·ªÉm tra n·∫øu voucher c√≤n ƒë·ªß s·ªë l∆∞·ª£ng
          if (voucher.so_luong > 0) {
            // Gi·∫£m s·ªë l∆∞·ª£ng voucher
            await strapi.entityService.update(
              "api::voucher.voucher", // ƒê·∫£m b·∫£o t√™n model ƒë√∫ng
              voucherId,
              { data: { so_luong: voucher.so_luong - 1 } }
            );
            console.log(`Gi·∫£m s·ªë l∆∞·ª£ng voucher ID ${voucherId} ƒëi 1.`);
          } else {
            console.log(`Voucher ID ${voucherId} ƒë√£ h·∫øt s·ªë l∆∞·ª£ng.`);
          }
        } else {
          console.log(`Kh√¥ng t√¨m th·∫•y voucher v·ªõi ID ${voucherId}`);
        }
      }
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng:", error);
    }
  },
  async afterUpdate(event) {
    const { result, params } = event;
    console.log(params);

    // Ki·ªÉm tra n·∫øu 'remember' l√† true
    if (params.data.remember) {
      try {
        // L·∫•y userId t·ª´ params (user trong ƒë∆°n h√†ng)
        const userId = params.data.user;

        if (!userId) {
          console.log("Kh√¥ng t√¨m th·∫•y userId trong params");
          return;
        }

        // Truy v·∫•n ng∆∞·ªùi d√πng t·ª´ plugin users-permissions
        const user = await strapi.entityService.findOne(
          "plugin::users-permissions.user", // S·ª≠ d·ª•ng ƒë√∫ng namespace v√† model
          userId // ID ng∆∞·ªùi d√πng
        );

        if (user) {
          // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng n·∫øu t√¨m th·∫•y
          const updatedUserData = {
            firstName: params.data.firstName || user.firstName,
            lastName: params.data.lastName || user.lastName,
            phone: params.data.phone || user.phone,
            email: params.data.email || user.email,
            address: params.data.address || user.address,
          };

          // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
          await strapi.entityService.update(
            "plugin::users-permissions.user", // C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
            userId,
            { data: updatedUserData }
          );

          console.log(`C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v·ªõi ID ${userId}`);
        } else {
          console.log(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID ${userId}`);
        }
      } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
      }
    }
  },
};
